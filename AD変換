import numpy as np
import matplotlib.pyplot as plt

# Function to create a sine wave signal
def create_sine_wave(freq, duration, sample_rate):
    t = np.linspace(0, duration, int(sample_rate * duration), endpoint=False)
    wave = 0.5 * np.sin(2 * np.pi * freq * t)  # Amplitude of 0.5
    return t, wave

# Function to perform ADC (Sampling and 1-bit Quantization)
def adc_signal(signal, sample_rate):
    # Sample the signal
    sampled_rate = sample_rate // 4  # Downsample by 4 for this simulation
    t_sampled = np.arange(0, len(signal), sampled_rate)
    sampled_signal = signal[t_sampled]

    # 1-bit Quantization
    quantized_signal = np.where(sampled_signal >= 0, 1, 0)  # Map positive to 1 and negative to 0

    # Encode to binary (1-bit)
    binary_signal = np.array(['1' if level == 1 else '0' for level in quantized_signal])
    
    return t_sampled, sampled_signal, quantized_signal, binary_signal

# Parameters
freq = 5  # Frequency of the sine wave (Hz)
duration = 1.0  # Duration in seconds
sample_rate = 1000  # Original sample rate (Hz)

# Create the sine wave
t, original_signal = create_sine_wave(freq, duration, sample_rate)

# Perform ADC
t_sampled, sampled_signal, quantized_signal, binary_signal = adc_signal(original_signal, sample_rate)

# Plotting the results
plt.figure(figsize=(15, 12))

# Original Signal
plt.subplot(4, 1, 1)
plt.plot(t, original_signal, label='Original Signal', color='blue')
plt.title('Original Sine Wave Signal')
plt.xlabel('Time [s]')
plt.ylabel('Amplitude')
plt.grid()
plt.legend()

# Sampled Signal
plt.subplot(4, 1, 2)
plt.stem(t_sampled / sample_rate, sampled_signal, label='Sampled Signal', linefmt='orange', markerfmt='ro', basefmt=' ')
plt.title('Sampled Signal')
plt.xlabel('Time [s]')
plt.ylabel('Amplitude')
plt.grid()
plt.legend()

# Quantized Signal
plt.subplot(4, 1, 3)
plt.stem(t_sampled / sample_rate, quantized_signal, label='1-Bit Quantized Signal', linefmt='green', markerfmt='go', basefmt=' ')
plt.title('1-Bit Quantized Signal')
plt.xlabel('Time [s]')
plt.ylabel('Quantized Value')
plt.grid()
plt.legend()

# Binary Encoded Signal
plt.subplot(4, 1, 4)
plt.plot(t_sampled / sample_rate, binary_signal, marker='o', linestyle='None', color='purple')
plt.title('Binary Encoded Signal (1-Bit)')
plt.xlabel('Time [s]')
plt.ylabel('Binary Code')
plt.yticks(['0', '1'])  # One-bit binary representation
plt.grid()

plt.tight_layout()
plt.show()
