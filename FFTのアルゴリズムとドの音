import numpy as np
import matplotlib.pyplot as plt
import soundfile as sf

# 定義
fs = 44100  # サンプリング周波数
f = 261.63  # ドの音 (C4) の周波数
duration = 1 / f  # 1周期の時間（秒）

# 1周期分の時間軸
t = np.linspace(0, duration, int(fs * duration), endpoint=False)

# 入力サイン波を生成 (ドの音)
input_signal = 0.5 * np.sin(2 * np.pi * f * t)

# ノイズの追加 (ガウスノイズ)
noise = np.random.normal(0, 0.1, len(input_signal))  # 平均0、標準偏差0.1のノイズ
noisy_signal = input_signal + noise  # ノイズ入り信号

# ゼロパディングで信号の長さを1024に調整
nfft = 1024  # FFTの長さ（1024サンプル）
signal_padded = np.pad(input_signal, (0, nfft - len(input_signal)), 'constant')  # ゼロパディング
noisy_signal_padded = np.pad(noisy_signal, (0, nfft - len(noisy_signal)), 'constant')  # ゼロパディング

# ウィンドウ関数
window = np.hamming(nfft)  # ハミングウィンドウ
signal_windowed = signal_padded * window  # ウィンドウを掛ける
noisy_signal_windowed = noisy_signal_padded * window  # ノイズ入り信号にもウィンドウを掛ける

# FFTの計算
fft_result = np.fft.fft(signal_windowed)
fft_result = np.abs(fft_result) / nfft  # 振幅の正規化

fft_noisy_result = np.fft.fft(noisy_signal_windowed)
fft_noisy_result = np.abs(fft_noisy_result) / nfft  # 振幅の正規化

# 周波数軸の設定
frequencies = np.fft.fftfreq(nfft, 1/fs)[:nfft // 2]  # 周波数軸の設定

# 入力サイン波とノイズ入り信号のプロット
plt.figure(figsize=(12, 6))

# 入力サイン波のプロット
plt.subplot(2, 2, 1)
plt.plot(t, input_signal)
plt.title('Input C4 Note (1 Period, Time Domain Signal)')
plt.xlabel('Time [s]')
plt.ylabel('Amplitude')
plt.grid(True)

# ノイズ入り信号のプロット
plt.subplot(2, 2, 2)
plt.plot(t, noisy_signal)
plt.title('Noisy C4 Note (Time Domain Signal)')
plt.xlabel('Time [s]')
plt.ylabel('Amplitude')
plt.grid(True)

# FFTのプロット (入力信号)
plt.subplot(2, 2, 3)
plt.plot(frequencies, fft_result[:nfft // 2])  # 周波数領域のプロット
plt.title('FFT of C4 Note (1 Period, Frequency Domain)')
plt.xlabel('Frequency [Hz]')
plt.ylabel('Amplitude')
plt.grid(True)

# FFTのプロット (ノイズ入り信号)
plt.subplot(2, 2, 4)
plt.plot(frequencies, fft_noisy_result[:nfft // 2])  # 周波数領域のプロット
plt.title('FFT of Noisy C4 Note (Frequency Domain)')
plt.xlabel('Frequency [Hz]')
plt.ylabel('Amplitude')
plt.grid(True)

plt.tight_layout()
plt.show()
