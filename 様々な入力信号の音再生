import numpy as np
import matplotlib.pyplot as plt
from scipy.fft import fft, fftfreq
from scipy.signal import sawtooth, square
from IPython.display import Audio
import time

# 基本設定
sampling_rate = 44100  # サンプリングレート
frequency = 261.63  # ド(C4)の周波数 (Hz)
duration = 1.0  # 波形表示用の音の持続時間 (秒)
playback_duration = 5.0  # 再生用の音の持続時間 (秒)
t = np.linspace(0, 2 / frequency, int(sampling_rate * (2 / frequency)), endpoint=False)  # 時間軸 (2周期分)
t_playback = np.linspace(0, playback_duration, int(sampling_rate * playback_duration), endpoint=False)  # 再生用時間軸

# 各波形の生成
def generate_waveforms():
    waveforms = {
        "Sine Wave": np.sin(2 * np.pi * frequency * t),
        "Sawtooth Wave": sawtooth(2 * np.pi * frequency * t),
        "Triangle Wave": sawtooth(2 * np.pi * frequency * t, width=0.5),
        "Square Wave": square(2 * np.pi * frequency * t),
        "Pulse Wave": square(2 * np.pi * frequency * t, duty=0.2),
        "Noise Wave": np.random.normal(0, 0.5, len(t)),
        "Step Input": np.ones(len(t)),
        "Ramp Input": t,
        "Impulse Input": np.concatenate(([1], np.zeros(len(t) - 1))),
    }
    return waveforms

# 再生用波形の生成
def generate_playback_waveforms():
    playback_waveforms = {
        "Sine Wave": np.sin(2 * np.pi * frequency * t_playback),
        "Sawtooth Wave": sawtooth(2 * np.pi * frequency * t_playback),
        "Triangle Wave": sawtooth(2 * np.pi * frequency * t_playback, width=0.5),
        "Square Wave": square(2 * np.pi * frequency * t_playback),
        "Pulse Wave": square(2 * np.pi * frequency * t_playback, duty=0.2),
        "Noise Wave": np.random.normal(0, 0.5, len(t_playback)),
        "Step Input": np.ones(len(t_playback)),
        "Ramp Input": t_playback,
        "Impulse Input": np.concatenate(([1], np.zeros(len(t_playback) - 1))),
    }
    return playback_waveforms

# FFT解析
def compute_fft(waveform):
    N = len(waveform)
    yf = fft(waveform)
    xf = fftfreq(N, 1 / sampling_rate)
    return xf[:N // 2], np.abs(yf[:N // 2])

# 波形のプロットとFFT表示
def plot_waveform_and_fft(waveforms):
    for name, waveform in waveforms.items():
        xf, yf = compute_fft(waveform)
        plt.figure(figsize=(14, 8))  # 波形を拡大表示

        # 波形プロット
        plt.subplot(2, 1, 1)
        plt.plot(t, waveform)
        plt.title(f"{name} - Waveform")
        plt.xlabel("Time [s]")
        plt.ylabel("Amplitude")
        plt.grid(True)  # グリッドを追加

        # FFTプロット
        plt.subplot(2, 1, 2)
        plt.plot(xf, yf)
        plt.title(f"{name} - FFT")
        plt.xlabel("Frequency [Hz]")
        plt.ylabel("Magnitude")
        plt.grid(True)  # グリッドを追加

        plt.tight_layout()
        plt.show()

# 再生用ファイルの生成と再生
# This section generates WAV files for each waveform and plays them back.
def save_and_play(waveforms):
    for name, waveform in waveforms.items():
        scaled_waveform = np.int16(waveform / np.max(np.abs(waveform)) * 32767)  # 16bit PCMスケーリング
        filename = f"{name.replace(' ', '_')}.wav"  # ファイル名にスペースを含まないように
        from scipy.io.wavfile import write
        write(filename, sampling_rate, scaled_waveform)  # WAVファイルの保存
        print(f"Playing {name}...")  # 再生開始の通知
        audio = Audio(filename)
        display(audio)  # 再生

# メイン処理
waveforms = generate_waveforms()
plot_waveform_and_fft(waveforms)
playback_waveforms = generate_playback_waveforms()
save_and_play(playback_waveforms)
