import numpy as np
import matplotlib.pyplot as plt

# Function to generate the impulse response of a first-order lag system
def impulse_response(K, tau, t):
    return K * (1 / tau) * np.exp(-t / tau) * (t >= 0)  # u(t) is represented by (t >= 0)

# Parameters
K = 1.0        # Gain
tau = 1.0      # Time constant
duration = 5.0  # Duration in seconds
sample_rate = 1000  # Sample rate in Hz

# Time vector
t = np.linspace(0, duration, int(sample_rate * duration))

# Generate impulse response
h = impulse_response(K, tau, t)

# Generate input signal (step function)
input_signal = np.ones_like(t)  # Unit step function

# Perform convolution
convolution_output = np.convolve(input_signal, h, mode='full')
t_conv = np.linspace(0, duration + duration / sample_rate, len(convolution_output))

# Plotting the results
plt.figure(figsize=(15, 10))

# Impulse Response
plt.subplot(3, 1, 1)
plt.plot(t, h, label='Impulse Response h(t)', color='blue')
plt.title('Impulse Response of First-Order Lag System')
plt.xlabel('Time [s]')
plt.ylabel('Amplitude')
plt.grid()
plt.legend()

# Input Signal
plt.subplot(3, 1, 2)
plt.plot(t, input_signal, label='Input Signal (Step Function)', color='orange')
plt.title('Input Signal (Step Function)')
plt.xlabel('Time [s]')
plt.ylabel('Amplitude')
plt.grid()
plt.legend()

# Convolution Output
plt.subplot(3, 1, 3)
plt.plot(t_conv, convolution_output[:len(t_conv)], label='Convolution Output', color='green')
plt.title('Output of First-Order Lag System (Convolution)')
plt.xlabel('Time [s]')
plt.ylabel('Amplitude')
plt.grid()
plt.legend()

plt.tight_layout()
plt.show()
