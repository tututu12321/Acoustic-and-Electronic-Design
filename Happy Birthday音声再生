import numpy as np
import matplotlib.pyplot as plt
from scipy.io.wavfile import write
from IPython.display import Audio

# サンプリング周波数
sample_rate = 44100

# 音階と周波数の辞書
note_frequencies = {
    'C4': 261.63, 'C#4': 277.18, 'D4': 293.66, 'D#4': 311.13, 'E4': 329.63, 
    'F4': 349.23, 'F#4': 369.99, 'G4': 392.00, 'G#4': 415.30, 'A4': 440.00, 
    'A#4': 466.16, 'B4': 493.88, 'C5': 523.25, 'D5': 587.33, 'E5': 659.25
}

# 音の生成関数（高調波、エンベロープ付き）
def generate_piano_tone(frequency, duration, amplitude=0.5):
    t = np.linspace(0, duration, int(sample_rate * duration), endpoint=False)  # 時間軸
    waveform = 0.6 * np.sin(2 * np.pi * frequency * t)  # 基本波（サイン波）
    waveform += 0.3 * np.sin(2 * np.pi * frequency * 2 * t)  # 2倍周波数（高調波）
    waveform += 0.1 * np.sin(2 * np.pi * frequency * 3 * t)  # 3倍周波数（高調波）
    waveform *= np.exp(-t / (duration / 5))  # エンベロープ（音の減衰）
    return waveform

# "Happy Birthday"のメロディ（音符）と音符の長さ（秒）
melody = [
    ('C4', 0.5), ('C4', 0.5), ('D4', 0.5), ('C4', 0.5), ('F4', 1.0), ('E4', 0.5),  # Happy Birthday to you
    ('C4', 0.5), ('C4', 0.5), ('D4', 0.5), ('C4', 0.5), ('G4', 1.0), ('F4', 1.0),  # Happy Birthday to you
    ('C4', 0.5), ('C4', 0.5), ('C5', 0.5), ('A4', 1.0), ('F4', 1.0), ('E4', 0.5), ('D4', 0.5),  # Happy Birthday dear (Name)
    ('A#4', 0.5), ('A#4', 0.5), ('A4', 0.5), ('F4', 1.0), ('G4', 0.5), ('F4', 1.0)  # Happy Birthday to you
]

# メロディの生成
melody_wave = np.array([])

for note, duration in melody:
    frequency = note_frequencies[note]
    note_wave = generate_piano_tone(frequency, duration)  # 各音符を指定された時間で生成
    melody_wave = np.concatenate((melody_wave, note_wave))

# 各行の後に静かな間（0.5秒）
silence = np.zeros(int(sample_rate * 0.5))  # 0.5秒の静かな間
melody_wave = np.concatenate((melody_wave, silence))

# 音声の正規化（クリッピング防止）
melody_wave = melody_wave / np.max(np.abs(melody_wave))

# 音声ファイルの保存
write('happy_birthday_piano_advanced.wav', sample_rate, (melody_wave * 32767).astype(np.int16))

# 音声の再生
Audio('happy_birthday_piano_advanced.wav')  # 音声ファイルの再生
