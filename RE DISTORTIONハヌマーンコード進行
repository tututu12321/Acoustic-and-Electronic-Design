import numpy as np
from scipy.io.wavfile import write
import IPython.display as ipd
import matplotlib.pyplot as plt

# サンプリングレートと音の設定
sampling_rate = 44100  # 44.1 kHz
tempo = 95  # BPM
beat_duration = 60 / tempo  # 1拍の長さ (秒)

# 音を生成する関数
def generate_guitar_wave(freq, duration, amp=0.5):
    t = np.linspace(0, duration, int(sampling_rate * duration), endpoint=False)
    envelope = np.exp(-4 * t)  
    wave = amp * np.sin(2 * np.pi * freq * t) * envelope

    wave += (amp / 2) * np.sin(2 * np.pi * freq * 2 * t) * envelope
    wave += (amp / 4) * np.sin(2 * np.pi * freq * 3 * t) * envelope
    return wave

# 楽曲のコード進行
chords = [
    [(329.63, beat_duration), (415.30, beat_duration), (493.88, beat_duration)],  # Emadd9: E, G, B
    [(329.63, beat_duration), (415.30, beat_duration), (440.00, beat_duration)],  # Emadd9/A: E, G, A
    [(293.66, beat_duration), (369.99, beat_duration), (493.88, beat_duration)],  # D7: D, F#, A, C
    [(392.00, beat_duration), (493.88, beat_duration), (587.33, beat_duration)],  # G△7: G, B, D, F#
    [(277.18, beat_duration), (349.23, beat_duration), (440.00, beat_duration)],  # C#m7-5: C#, E, G, B
    [(370.00, beat_duration), (440.00, beat_duration), (554.37, beat_duration)],  # F#m7-5: F#, A, C, E
    [(392.00, beat_duration), (493.88, beat_duration), (587.33, beat_duration)],  # G: G, B, D
    [(493.88, beat_duration), (622.25, beat_duration), (739.99, beat_duration)],  # B7: B, D#, F#, A
]

# 各コードを合成
def generate_chord_progression(chords):
    progression = np.array([])
    for chord in chords:
        chord_wave = np.zeros(int(sampling_rate * beat_duration))
        for freq, duration in chord:
            chord_wave += generate_guitar_wave(freq, duration)
        progression = np.concatenate((progression, chord_wave))
    return progression

progression = generate_chord_progression(chords)

# ループを繰り返す
looped_progression = np.tile(progression, 4)  # 4回繰り返す

# 音声を正規化
looped_progression = looped_progression / np.max(np.abs(looped_progression))

# 波形のプロット
plt.figure(figsize=(12, 6))
plt.plot(looped_progression[:sampling_rate * 8])  # 最初の8秒間を表示
plt.title("Waveform of RE DISTORTION Progression ")
plt.xlabel("Samples")
plt.ylabel("Amplitude")
plt.grid()
plt.show()

# FFTのプロット
fft_data = np.fft.fft(looped_progression)
frequencies = np.fft.fftfreq(len(fft_data), 1 / sampling_rate)
plt.figure(figsize=(12, 6))
plt.plot(frequencies[:len(frequencies) // 2], np.abs(fft_data)[:len(frequencies) // 2])
plt.title("FFT of RE DISTORTION Progression ")
plt.xlabel("Frequency (Hz)")
plt.ylabel("Amplitude")
plt.grid()
plt.show()

# ファイルに保存
progression_audio = (looped_progression * 32767).astype(np.int16)
write("re_distortion_guitar_looped.wav", sampling_rate, progression_audio)

# Google Colabで音声を再生
ipd.Audio("re_distortion_guitar_looped.wav", rate=sampling_rate)
