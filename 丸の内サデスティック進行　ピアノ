import numpy as np
from scipy.io.wavfile import write
from IPython.display import Audio

# 音波生成の関数
def generate_piano_wave(frequency, duration, sample_rate, attack=0.02, decay=0.1, sustain=0.7, release=0.2):
    t = np.linspace(0, duration, int(sample_rate * duration), endpoint=False)
    wave = 0.5 * np.sin(2 * np.pi * frequency * t)  # 基音
    for i in range(2, 10):  # 高次倍音
        wave += (1 / i) * np.sin(2 * np.pi * i * frequency * t)
    
    vibrato_frequency = 5  # ビブラート周波数（Hz）
    vibrato_depth = 0.005  # ビブラートの深さ
    vibrato = np.sin(2 * np.pi * vibrato_frequency * t) * vibrato_depth
    wave = wave * np.sin(2 * np.pi * frequency * t + vibrato)  # ビブラートを加える

    return apply_adsr_envelope(wave, attack, decay, sustain, release, duration, sample_rate)

# ADSRエンベロープを適用する関数
def apply_adsr_envelope(wave, attack, decay, sustain, release, duration, sample_rate):
    attack_samples = int(attack * sample_rate)
    decay_samples = int(decay * sample_rate)
    sustain_samples = int(sustain * sample_rate)
    release_samples = int(release * sample_rate)

    envelope = np.zeros(int(sample_rate * duration))
    
    # Attack (立ち上がり)
    envelope[:attack_samples] = np.linspace(0, 1, attack_samples)
    
    # Decay (減衰)
    envelope[attack_samples:attack_samples+decay_samples] = np.linspace(1, sustain, decay_samples)
    
    # Sustain (持続)
    envelope[attack_samples+decay_samples:attack_samples+decay_samples+sustain_samples] = sustain
    
    # Release (減衰)
    envelope[-release_samples:] = np.linspace(sustain, 0, release_samples)
    
    return wave * envelope

# 音声ファイルの保存
def save_audio(frequencies, duration, sample_rate, filename="piano_chords.wav"):
    final_wave = np.array([])

    # 各音の波形を生成し、結合
    for frequency in frequencies:
        wave = generate_piano_wave(frequency, duration, sample_rate)
        final_wave = np.concatenate((final_wave, wave))

    # 音声データを16ビットPCM形式に変換
    audio_data = np.int16(final_wave * 32767)
    
    # 音声ファイルを保存
    write(filename, sample_rate, audio_data)

# 使用する音の周波数 (F, E, Am, C7)
frequencies = [
    349.23,    # F4
    329.63,    # E4
    440.00,    # A4 (Am chord root)
    261.63     # C4 (C7 chord root)
]

# サンプルレートと音の長さ（秒）
sample_rate = 44100
duration = 0.5  # 1拍の長さ（秒）

# 音声ファイルを保存
save_audio(frequencies, duration, sample_rate, 'piano_chords.wav')

# Google Colabで音声を再生
Audio('piano_chords.wav')
