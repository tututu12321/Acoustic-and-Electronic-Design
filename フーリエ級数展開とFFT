# Combine the previous code into a single Python script to plot both the original waves, their Fourier series approximations, and their FFT results.

import numpy as np
import matplotlib.pyplot as plt

# Define the time parameters
T = 2 * np.pi  # Period of the wave
t = np.linspace(0, T, 1000)  # Time array
A = 1  # Amplitude

# Square wave (asymmetric)
square_wave = A * (t % T < T / 2)  # 1 for the first half, -1 for the second half

# Triangle wave
triangle_wave = (2 * A / T) * np.abs((t % T) - T / 2) - A / 2

# Sawtooth wave
sawtooth_wave = (A / T) * (t % T)

# Fourier series approximation for square wave
square_fourier = np.zeros_like(t)
for n in range(1, 20, 2):  # Only odd harmonics for square wave
    square_fourier += (4 * A) / (np.pi * n) * np.sin(2 * np.pi * n * t / T)

# Fourier series approximation for triangle wave
triangle_fourier = np.zeros_like(t)
for n in range(1, 20, 2):  # Only odd harmonics for triangle wave
    triangle_fourier += (8 * A) / (np.pi ** 2 * n ** 2) * (-1) ** ((n - 1) // 2) * np.sin(2 * np.pi * n * t / T)

# Fourier series approximation for sawtooth wave
sawtooth_fourier = np.zeros_like(t)
for n in range(1, 20):  # All harmonics for sawtooth wave
    sawtooth_fourier += (2 * A) / (np.pi * n) * np.sin(2 * np.pi * n * t / T)

# Perform FFT on the original waves (square, triangle, and sawtooth)
square_wave_fft = np.fft.fft(square_wave)
triangle_wave_fft = np.fft.fft(triangle_wave)
sawtooth_wave_fft = np.fft.fft(sawtooth_wave)

# Frequency axis for FFT (positive frequencies only)
n = len(t)
frequencies = np.fft.fftfreq(n, t[1] - t[0])
positive_frequencies = frequencies[:n//2]
square_wave_fft_magnitude = np.abs(square_wave_fft[:n//2])
triangle_wave_fft_magnitude = np.abs(triangle_wave_fft[:n//2])
sawtooth_wave_fft_magnitude = np.abs(sawtooth_wave_fft[:n//2])

# Plot the waves, their Fourier series approximations, and their FFT results
plt.figure(figsize=(12, 8))

# Plot square wave and its Fourier series approximation
plt.subplot(3, 2, 1)
plt.plot(t, square_wave, label="Square Wave", color='b')
plt.title("Square Wave (Period T)")
plt.xlabel("Time (t)")
plt.ylabel("Amplitude")
plt.grid(True)

plt.subplot(3, 2, 2)
plt.plot(t, square_fourier, label="Fourier Series Approximation", color='r')
plt.title("Fourier Series Approximation of Square Wave")
plt.xlabel("Time (t)")
plt.ylabel("Amplitude")
plt.grid(True)

# Plot triangle wave and its Fourier series approximation
plt.subplot(3, 2, 3)
plt.plot(t, triangle_wave, label="Triangle Wave", color='b')
plt.title("Triangle Wave (Period T)")
plt.xlabel("Time (t)")
plt.ylabel("Amplitude")
plt.grid(True)

plt.subplot(3, 2, 4)
plt.plot(t, triangle_fourier, label="Fourier Series Approximation", color='r')
plt.title("Fourier Series Approximation of Triangle Wave")
plt.xlabel("Time (t)")
plt.ylabel("Amplitude")
plt.grid(True)

# Plot sawtooth wave and its Fourier series approximation
plt.subplot(3, 2, 5)
plt.plot(t, sawtooth_wave, label="Sawtooth Wave", color='b')
plt.title("Sawtooth Wave (Period T)")
plt.xlabel("Time (t)")
plt.ylabel("Amplitude")
plt.grid(True)

plt.subplot(3, 2, 6)
plt.plot(t, sawtooth_fourier, label="Fourier Series Approximation", color='r')
plt.title("Fourier Series Approximation of Sawtooth Wave")
plt.xlabel("Time (t)")
plt.ylabel("Amplitude")
plt.grid(True)

# Plot FFT results for square, triangle, and sawtooth waves
plt.figure(figsize=(12, 8))

# Plot FFT for square wave
plt.subplot(3, 1, 1)
plt.plot(positive_frequencies, square_wave_fft_magnitude, label="FFT of Square Wave", color='b')
plt.title("FFT of Square Wave")
plt.xlabel("Frequency (Hz)")
plt.ylabel("Magnitude")
plt.grid(True)

# Plot FFT for triangle wave
plt.subplot(3, 1, 2)
plt.plot(positive_frequencies, triangle_wave_fft_magnitude, label="FFT of Triangle Wave", color='g')
plt.title("FFT of Triangle Wave")
plt.xlabel("Frequency (Hz)")
plt.ylabel("Magnitude")
plt.grid(True)

# Plot FFT for sawtooth wave
plt.subplot(3, 1, 3)
plt.plot(positive_frequencies, sawtooth_wave_fft_magnitude, label="FFT of Sawtooth Wave", color='r')
plt.title("FFT of Sawtooth Wave")
plt.xlabel("Frequency (Hz)")
plt.ylabel("Magnitude")
plt.grid(True)

plt.tight_layout()
plt.show()
