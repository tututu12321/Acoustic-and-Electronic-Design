import numpy as np
import matplotlib.pyplot as plt
from scipy.signal import butter, filtfilt
import soundfile as sf
import IPython.display as ipd

# アナログ入力信号の生成
fs = 10000  # サンプリング周波数
f = 440  # 入力信号の周波数
t = np.linspace(0, 1, fs)  # 時間軸
analog_signal = 0.5 * np.sin(2 * np.pi * f * t)  # 入力アナログ信号

# ノイズの追加（ガウスノイズ）
noise_level = 0.2  # ノイズの振幅
noise = np.random.normal(0, noise_level, size=analog_signal.shape)
noisy_signal = analog_signal + noise  # ノイズを加えた信号

# ΔΣ変調器の動作
integrator = 0
Vref = 0.5
output_bits = []
integrator_outputs = []

for va in noisy_signal:
    # 減算回路（Δ）の計算
    if integrator >= 0:
        # 積分器の出力が非負の場合
        delta = va - Vref
    else:
        # 積分器の出力が負の場合
        delta = va + Vref
    
    # 積分器の更新
    integrator += delta
    
    # 加算回路の出力（1ビットの生成）
    if integrator >= 0:
        bit = 1
    else:
        bit = 0
    
    # 出力ビットストリームにビットを追加
    output_bits.append(bit)
    
    # 積分器の出力を記録
    integrator_outputs.append(integrator)

# 新しいローパスフィルタを作成
def lowpass_filter_sinewave(data, cutoff, fs, order=5):
    nyquist = 0.5 * fs
    normal_cutoff = cutoff / nyquist
    b, a = butter(order, normal_cutoff, btype='low', analog=False)
    y = filtfilt(b, a, data)
    return y

# カットオフ周波数を設定（440 Hzより高い周波数でフィルタリング）
cutoff_frequency = 500  # カットオフ周波数 (Hz) 高い周波数をフィルタリング
filtered_signal = lowpass_filter_sinewave(output_bits, cutoff_frequency, fs)

# 音声として再生するための準備
# 各信号を.wavとして保存
sf.write('noisy_input_signal.wav', noisy_signal.astype(np.float32), fs)
sf.write('integrator_output.wav', np.array(integrator_outputs, dtype=np.float32), fs)
sf.write('delta_sigma_modulated_bitstream.wav', np.array(output_bits, dtype=np.float32), fs)
sf.write('filtered_signal.wav', np.array(filtered_signal, dtype=np.float32), fs)

# プロット
fig, axs = plt.subplots(4, 1, figsize=(12, 10), sharex=True)

# ノイズを加えた入力信号のプロット
axs[0].plot(t, noisy_signal, label='Noisy Input Signal')
axs[0].set_title('Noisy Input Signal')
axs[0].set_ylabel('Amplitude')
axs[0].legend()

# 積分器の出力のプロット
axs[1].plot(t, integrator_outputs, label='Integrator Output')
axs[1].set_title('Integrator Output')
axs[1].set_ylabel('Amplitude')
axs[1].legend()

# ΔΣ変調ビットストリームのプロット
axs[2].step(t, output_bits, where='mid', label='Delta-Sigma Modulated Bitstream')
axs[2].set_title('Delta-Sigma Modulated Bitstream')
axs[2].set_ylabel('Bit Value')
axs[2].legend()

# ローパスフィルタ後の信号のプロット
axs[3].plot(t, filtered_signal, label='Filtered Signal (Lowpass)')
axs[3].set_title('Filtered Signal (Lowpass)')
axs[3].set_xlabel('Time [s]')
axs[3].set_ylabel('Amplitude')
axs[3].legend()

plt.tight_layout()
plt.show()

# 各音を再生
ipd.display(ipd.Audio('noisy_input_signal.wav'))
ipd.display(ipd.Audio('integrator_output.wav'))
ipd.display(ipd.Audio('delta_sigma_modulated_bitstream.wav'))
ipd.display(ipd.Audio('filtered_signal.wav'))
