import numpy as np
import matplotlib.pyplot as plt

# Function to create a sine wave
def create_sine_wave(freq, duration, sample_rate):
    t = np.linspace(0, duration, int(sample_rate * duration), endpoint=False)
    wave = 0.5 * np.sin(2 * np.pi * freq * t)  # Amplitude of 0.5
    return t, wave

# Function to apply chorus effect with parameters
def apply_chorus(input_wave, rate, depth, voice, mix, sample_rate):
    chorus_wave = np.zeros_like(input_wave)
    for v in range(voice):
        delay_samples = int((depth / 1000) * sample_rate * (1 + 0.5 * np.sin(2 * np.pi * rate * v / sample_rate)))
        delayed_wave = np.zeros_like(input_wave)
        delayed_wave[delay_samples:] = input_wave[:-delay_samples]
        chorus_wave += delayed_wave * (1 / voice)  # Average the voices
    return mix * chorus_wave + (1 - mix) * input_wave  # Mix dry and wet signals

# Function to apply flanger effect with parameters
def apply_flanger(input_wave, rate, depth, feedback, mix, sample_rate):
    flanger_wave = np.zeros_like(input_wave)
    max_delay_samples = int((depth / 1000) * sample_rate)
    
    for i in range(len(input_wave)):
        delay_samples = int(max_delay_samples * (1 + np.sin(2 * np.pi * rate * i / sample_rate)))
        if i - delay_samples >= 0:
            flanger_wave[i] = input_wave[i] + input_wave[i - delay_samples] * feedback
        else:
            flanger_wave[i] = input_wave[i]
    
    return mix * flanger_wave + (1 - mix) * input_wave  # Mix dry and wet signals

# Parameters
frequency = 440  # Frequency of sine wave (A4)
duration = 0.1   # Duration in seconds
sample_rate = 44100  # Sample rate in Hz

# Create sine wave
t, sine_wave = create_sine_wave(frequency, duration, sample_rate)

# Chorus parameters
chorus_rate = 5  # Rate for modulation (Hz)
chorus_depth = 20  # Depth for modulation (ms)
chorus_voice = 4  # Number of voices
chorus_mix = 0.7  # Mix ratio (0 = dry, 1 = wet)

# Flanger parameters
flanger_rate = 5  # Rate for modulation (Hz)
flanger_depth = 5  # Depth for modulation (ms)
flanger_feedback = 0.5  # Feedback ratio (0 to 1)
flanger_mix = 0.7  # Mix ratio (0 = dry, 1 = wet)

# Apply effects
chorus_effect = apply_chorus(sine_wave, chorus_rate, chorus_depth, chorus_voice, chorus_mix, sample_rate)
flanger_effect = apply_flanger(sine_wave, flanger_rate, flanger_depth, flanger_feedback, flanger_mix, sample_rate)

# Plotting
plt.figure(figsize=(15, 10))

# Original Sine Wave
plt.subplot(3, 1, 1)
plt.plot(t, sine_wave, label='Original Sine Wave', color='blue')
plt.title('Original Sine Wave')
plt.xlabel('Time [s]')
plt.ylabel('Amplitude')
plt.grid()
plt.legend()

# Chorus Effect
plt.subplot(3, 1, 2)
plt.plot(t, chorus_effect, label='Chorus Effect', color='green')
plt.title('Chorus Effect')
plt.xlabel('Time [s]')
plt.ylabel('Amplitude')
plt.grid()
plt.legend()

# Flanger Effect
plt.subplot(3, 1, 3)
plt.plot(t, flanger_effect, label='Flanger Effect', color='purple')
plt.title('Flanger Effect')
plt.xlabel('Time [s]')
plt.ylabel('Amplitude')
plt.grid()
plt.legend()

plt.tight_layout()
plt.show()
