```Python
import numpy as np
import matplotlib.pyplot as plt
from scipy.signal import lfilter

# パラメータ設定
fs = 48000  # サンプリング周波数
rt60 = 2.0  # 残響時間 (秒)

# コムフィルタ遅延（サンプル数）とゲイン
delays_comb = [1913, 1733, 1597, 1447]
gains_comb = [0.871402, 0.882762, 0.891443, 0.901117]

# オールパスフィルタ遅延（サンプル数）とゲイン
delays_allpass = [241, 83]
gains_allpass = [0.7, 0.7]

# インパルス信号を生成
impulse = np.zeros(fs)
impulse[0] = 1  # インパルスを最初にセット

# コムフィルタのインパルス応答を生成
def comb_filter(input_signal, delay, gain):
    output = np.zeros_like(input_signal)
    output[delay:] = input_signal[:-delay] * gain
    return input_signal + output

# オールパスフィルタのインパルス応答を生成
def allpass_filter(input_signal, delay, gain):
    output = np.zeros_like(input_signal)
    output[delay:] = input_signal[:-delay] - gain * output[:-delay]
    return input_signal + gain * output

# コムフィルタの応答
comb_outputs = [comb_filter(impulse, d, g) for d, g in zip(delays_comb, gains_comb)]
combined_comb_output = sum(comb_outputs)  # 並列に接続

# オールパスフィルタを適用
allpass_output = combined_comb_output.copy()
for delay, gain in zip(delays_allpass, gains_allpass):
    allpass_output = allpass_filter(allpass_output, delay, gain)

# エネルギー減衰カーブの計算
energy = np.cumsum(allpass_output**2)[::-1]  # 累積エネルギーの逆順
energy_db = 10 * np.log10(energy / np.max(energy))

# プロット
plt.figure(figsize=(12, 8))

# コムフィルタのインパルス応答
plt.subplot(3, 1, 1)
for i, output in enumerate(comb_outputs, 1):
    plt.plot(output, label=f'Comb Filter {i}')
plt.title("Impulse Response of Comb Filters")
plt.xlabel("Sample")
plt.ylabel("Amplitude")
plt.legend()
plt.grid()

# コムフィルタとオールパスフィルタのインパルス応答
plt.subplot(3, 1, 2)
plt.plot(allpass_output, label="Combined (Comb + Allpass Filters)", color="b")
plt.title("Impulse Response with Comb and Allpass Filters")
plt.xlabel("Sample")
plt.ylabel("Amplitude")
plt.legend()
plt.grid()

# エネルギー減衰カーブ
plt.subplot(3, 1, 3)
time = np.arange(len(energy_db)) / fs
plt.plot(time, energy_db, color="g")
plt.axhline(y=-60, color="r", linestyle="--", label="RT60 Threshold (-60 dB)")
plt.title("Energy Decay Curve and RT60")
plt.xlabel("Time (s)")
plt.ylabel("Energy (dB)")
plt.legend()
plt.grid()

plt.tight_layout()
plt.show()
```
