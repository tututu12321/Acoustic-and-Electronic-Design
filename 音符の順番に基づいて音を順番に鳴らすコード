# 音符の順番に基づいて音を順番に鳴らすコード

import numpy as np
import IPython.display as ipd

# サンプルレートを定義
RATE = 44100

# 音符の周波数を定義
note_frequencies = {
    'C3': 130.813, 'C#3': 138.591, 'D3': 146.832, 'D#3': 155.563,
    'E3': 164.814, 'F3': 174.614, 'F#3': 184.997, 'G3': 195.998,
    'G#3': 207.652, 'A3': 220.000, 'A#3': 233.082, 'B3': 246.942,
    'C4': 261.626, 'C#4': 277.183, 'D4': 293.665, 'D#4': 311.127,
    'E4': 329.628, 'F4': 349.228, 'F#4': 369.994, 'G4': 391.995,
    'G#4': 415.305, 'A4': 440.000, 'A#4': 466.164, 'B4': 493.883,
    'C5': 523.251, 'C#5': 554.365, 'D5': 587.330, 'D#5': 622.254,
    'E5': 659.255, 'F5': 698.456, 'F#5': 739.989, 'G5': 783.991,
    'G#5': 830.609, 'A5': 880.000, 'A#5': 932.328, 'B5': 987.767,
    'C6': 1046.502, 'C#6': 1108.731, 'D6': 1174.659, 'D#6': 1244.508,
    'E6': 1318.510, 'F6': 1396.913, 'F#6': 1479.978, 'G6': 1567.982,
    'G#6': 1661.219, 'A6': 1760.000, 'A#6': 1864.655, 'B6': 1975.533,
    'C7': 2093.005, 'C#7': 2217.461, 'D7': 2349.318, 'D#7': 2489.016,
    'E7': 2637.020, 'F7': 2793.826, 'F#7': 2959.955, 'G7': 3135.963,
    'G#7': 3322.438, 'A7': 3520.000, 'A#7': 3729.310, 'B7': 3951.066,
    'C8': 4186.009
}

# サイン波を生成する関数
def generate_tone(freq, length, gain=1.0):
    slen = int(length * RATE)
    t = np.linspace(0, length, slen, endpoint=False)
    return np.sin(2 * np.pi * freq * t) * gain

# 音符の順番に鳴らす
melody = list(note_frequencies.keys())  # 音符を順番にリストに格納

# 音を生成し、メロディーを再構成
audio = np.array([])

for note in melody:
    frequency = note_frequencies[note]
    tone = generate_tone(frequency, 0.5, gain=0.5)  # 各音符を0.5秒で生成
    audio = np.concatenate([audio, tone])

# 音の再生
ipd.display(ipd.Audio(audio, rate=RATE))

# メロディーのプロット（最初の部分を表示）
plt.figure(figsize=(10, 4))
plt.plot(np.linspace(0, len(audio) / RATE, len(audio)), audio)
plt.title('Generated Melody: Notes in Order')
plt.xlabel('Time [s]')
plt.ylabel('Amplitude')
plt.grid(True)
plt.show()
