import numpy as np
import matplotlib.pyplot as plt
from scipy.signal import butter, filtfilt

# Signal generation
def generate_signal(freq=1, duration=2, sample_rate=100):
    t = np.linspace(0, duration, duration * sample_rate, endpoint=False)
    signal = np.sin(2 * np.pi * freq * t)  # Sine wave
    noise = np.random.normal(0, 0.5, signal.shape)  # Noise
    return t, signal + noise  # Return noisy signal

# Moving average filter
def moving_average_filter(data, window_size):
    return np.convolve(data, np.ones(window_size)/window_size, mode='same')

# Lowpass filter
def lowpass_filter(data, cutoff_freq, sample_rate):
    nyquist = 0.5 * sample_rate
    normal_cutoff = cutoff_freq / nyquist
    b, a = butter(1, normal_cutoff, btype='low', analog=False)
    return filtfilt(b, a, data)

# Main process
def main():
    sample_rate = 100
    t, noisy_signal = generate_signal(freq=1, duration=2, sample_rate=sample_rate)
    
    # Apply filters
    moving_avg_result = moving_average_filter(noisy_signal, window_size=5)
    lowpass_result = lowpass_filter(noisy_signal, cutoff_freq=3, sample_rate=sample_rate)

    # Plotting
    plt.figure(figsize=(12, 8))
    
    plt.subplot(3, 1, 1)
    plt.plot(t, noisy_signal, label='Noisy Signal', color='gray')
    plt.title('Noisy Signal')
    plt.xlabel('Time [s]')
    plt.ylabel('Amplitude')
    plt.grid()
    
    plt.subplot(3, 1, 2)
    plt.plot(t, moving_avg_result, label='Moving Average Filter', color='blue')
    plt.title('Moving Average Filter Result')
    plt.xlabel('Time [s]')
    plt.ylabel('Amplitude')
    plt.grid()

    plt.subplot(3, 1, 3)
    plt.plot(t, lowpass_result, label='Lowpass Filter Result', color='green')
    plt.title('Lowpass Filter Result')
    plt.xlabel('Time [s]')
    plt.ylabel('Amplitude')
    plt.grid()
    
    plt.tight_layout()
    plt.show()

if __name__ == "__main__":
    main()
