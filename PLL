```python
import numpy as np
import matplotlib.pyplot as plt

# Parameters
Fs = 100000  # Sampling frequency (Hz)
T = 0.01  # Total time (seconds)
N = int(Fs * T)  # Number of samples
t = np.linspace(0, T, N, endpoint=False)  # Time vector

# Input signal parameters
f_input = 1000  # Frequency of the input signal (Hz)
input_signal = np.sin(2 * np.pi * f_input * t)

# PLL parameters
f_vco = 1000  # Initial VCO frequency (Hz)
k_vco = 2 * np.pi * 100  # VCO sensitivity (rad/Hz)
kp = 0.1  # Phase detector gain
kf = 0.01  # Loop filter gain
alpha = 0.9  # Loop filter smoothing factor

# Initialize variables
phase_error = np.zeros(N)
vco_signal = np.zeros(N)
loop_filter_output = np.zeros(N)

# PLL simulation
for i in range(1, N):
    # Phase detector
    phase_error[i] = np.arctan2(np.sin(input_signal[i] - vco_signal[i-1]), 
                                np.cos(input_signal[i] - vco_signal[i-1]))

    # Loop filter (simple low-pass filter)
    loop_filter_output[i] = alpha * loop_filter_output[i-1] + (1 - alpha) * phase_error[i]

    # VCO (Voltage Controlled Oscillator)
    vco_signal[i] = vco_signal[i-1] + 2 * np.pi * (f_vco + k_vco * loop_filter_output[i]) / Fs

# Convert VCO signal to actual signal
vco_signal = np.sin(vco_signal)

# Plotting
plt.figure(figsize=(12, 8))

# Input Signal
plt.subplot(3, 1, 1)
plt.plot(t[:1000], input_signal[:1000])
plt.title('Input Signal')
plt.xlabel('Time (s)')
plt.ylabel('Amplitude')
plt.grid()

# VCO Signal
plt.subplot(3, 1, 2)
plt.plot(t[:1000], vco_signal[:1000])
plt.title('VCO Output Signal')
plt.xlabel('Time (s)')
plt.ylabel('Amplitude')
plt.grid()

# Phase Error
plt.subplot(3, 1, 3)
plt.plot(t[:1000], phase_error[:1000])
plt.title('Phase Error')
plt.xlabel('Time (s)')
plt.ylabel('Phase Error (radians)')
plt.grid()

plt.tight_layout()
plt.show()
```


