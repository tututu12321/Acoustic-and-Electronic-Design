import numpy as np
from scipy.io.wavfile import write
import IPython.display as ipd
import matplotlib.pyplot as plt

# サンプリングレートと音の設定
sampling_rate = 44100  # 44.1 kHz
tempo = 120  # BPM
beat_duration = 60 / tempo  # 1拍の長さ (秒)

# シンセサイザー風の音を生成する関数
def generate_synth_wave(freq, duration, wave_type='sawtooth', amp=0.5):
    t = np.linspace(0, duration, int(sampling_rate * duration), endpoint=False)
    if wave_type == 'sawtooth':
        return amp * 2 * (t * freq - np.floor(t * freq + 0.5))  # ノコギリ波
    elif wave_type == 'triangle':
        return amp * 2 * np.abs(2 * (t * freq - np.floor(t * freq + 0.5))) - 1  # 三角波
    elif wave_type == 'square':
        return amp * np.sign(np.sin(2 * np.pi * freq * t))  # 矩形波
    else:  # デフォルトはサイン波
        return amp * np.sin(2 * np.pi * freq * t)

# コード進行「F△7–G7–Em7–Am」の音符 (各コードの構成音)
chords = [
    [(349.23, beat_duration), (440.00, beat_duration), (523.25, beat_duration), (659.25, beat_duration)],  # F△7: F, A, C, E
    [(392.00, beat_duration), (493.88, beat_duration), (587.33, beat_duration), (698.46, beat_duration)],  # G7: G, B, D, F
    [(329.63, beat_duration), (493.88, beat_duration), (587.33, beat_duration), (698.46, beat_duration)],  # Em7: E, G, B, D
    [(440.00, beat_duration), (523.25, beat_duration), (659.25, beat_duration)],                        # Am: A, C, E
]

# 各コードを合成
def generate_chord_progression(chords, wave_type='sawtooth'):
    progression = np.array([])
    for chord in chords:
        chord_wave = np.zeros(int(sampling_rate * beat_duration))
        for freq, duration in chord:
            chord_wave += generate_synth_wave(freq, duration, wave_type)
        progression = np.concatenate((progression, chord_wave))
    return progression

progression = generate_chord_progression(chords, wave_type='sawtooth')

# 最初の8秒間を切り取る
progression = progression[:int(sampling_rate * 8)]

# 8秒間のループを繰り返す
looped_progression = np.tile(progression, 4)  # 4回繰り返す (32秒分)

# 音声を正規化
looped_progression = looped_progression / np.max(np.abs(looped_progression))

# 波形のプロット
plt.figure(figsize=(12, 6))
plt.plot(looped_progression[:sampling_rate * 8])  # 最初の8秒間を表示
plt.title("Waveform of F△7–G7–Em7–Am Progression (Looped)")
plt.xlabel("Samples")
plt.ylabel("Amplitude")
plt.grid()
plt.show()

# FFTのプロット
fft_data = np.fft.fft(looped_progression)
frequencies = np.fft.fftfreq(len(fft_data), 1 / sampling_rate)
plt.figure(figsize=(12, 6))
plt.plot(frequencies[:len(frequencies) // 2], np.abs(fft_data)[:len(frequencies) // 2])
plt.title("FFT of F△7–G7–Em7–Am Progression (Looped)")
plt.xlabel("Frequency (Hz)")
plt.ylabel("Amplitude")
plt.grid()
plt.show()

# ファイルに保存
progression_audio = (looped_progression * 32767).astype(np.int16)
write("chord_progression_looped.wav", sampling_rate, progression_audio)

# Google Colabで音声を再生
ipd.Audio("chord_progression_looped.wav", rate=sampling_rate)
