```Python
import numpy as np
import matplotlib.pyplot as plt

# 反射、回折、屈折の視覚化用パラメータ
x = np.linspace(-10, 10, 400)
y = np.linspace(-10, 10, 400)
X, Y = np.meshgrid(x, y)
k = 2 * np.pi / 5  # 波数

# 反射のシミュレーション
incident_angle = np.radians(30)  # 入射角（30度）
incident_wave = np.sin(k * (X * np.cos(incident_angle) + Y * np.sin(incident_angle)))
reflected_wave = np.sin(k * (X * np.cos(-incident_angle) + Y * np.sin(-incident_angle)))
total_reflection = incident_wave + reflected_wave

# 回折のシミュレーション
slit_width = 2.0  # スリット幅
diffraction_wave = np.sin(k * np.sqrt(X**2 + Y**2)) * (np.abs(X) < slit_width)

# 屈折のシミュレーション（スネルの法則）
n1 = 1.0  # 屈折率（媒質1）
n2 = 1.5  # 屈折率（媒質2）
incident_angle = np.radians(30)  # 入射角
refracted_angle = np.arcsin(n1 / n2 * np.sin(incident_angle))  # スネルの法則
incident_wave_refract = np.sin(k * (X * np.cos(incident_angle) + Y * np.sin(incident_angle))) * (Y >= 0)
refracted_wave = np.sin(k * (X * np.cos(refracted_angle) + Y * np.sin(refracted_angle))) * (Y < 0)
total_refraction = incident_wave_refract + refracted_wave

# プロット
plt.figure(figsize=(15, 12))

# 反射プロット
plt.subplot(3, 1, 1)
plt.contourf(X, Y, total_reflection, levels=50, cmap='viridis')
plt.colorbar(label="Amplitude")
plt.title("Wave Reflection")
plt.xlabel("X-axis")
plt.ylabel("Y-axis")
plt.axhline(0, color='white', linestyle='--')

# 回折プロット
plt.subplot(3, 1, 2)
plt.contourf(X, Y, diffraction_wave, levels=50, cmap='inferno')
plt.colorbar(label="Amplitude")
plt.title("Wave Diffraction")
plt.xlabel("X-axis")
plt.ylabel("Y-axis")
plt.axvline(0, color='white', linestyle='--')

# 屈折プロット
plt.subplot(3, 1, 3)
plt.contourf(X, Y, total_refraction, levels=50, cmap='plasma')
plt.colorbar(label="Amplitude")
plt.title("Wave Refraction")
plt.xlabel("X-axis")
plt.ylabel("Y-axis")
plt.axhline(0, color='white', linestyle='--')

plt.tight_layout()
plt.show()
```
