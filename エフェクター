import numpy as np
import matplotlib.pyplot as plt

# 波形生成のための基本的な設定
sample_rate = 44100  # サンプリングレート
duration = 1  # 秒
freq = 440  # Hz（A4の周波数）
t = np.linspace(0, duration, int(sample_rate * duration), endpoint=False)

# 基本的なサイン波
sine_wave = np.sin(2 * np.pi * freq * t)

# オーバードライブ（ソフトな過剰増幅）
def overdrive(input_wave, drive=0.5):
    return np.clip(input_wave * (1 + drive), -1, 1)

# ファズ（ハードな過剰増幅）
def fuzz(input_wave, drive=1.0):
    return np.sign(input_wave) * np.clip(np.abs(input_wave) ** drive, 0, 1)

# 鋸波歪み（矩形波と鋸波の間の特性）
def sawtooth_wave_distortion(input_wave, depth=0.5):
    return np.clip(input_wave + np.sin(2 * np.pi * freq * t) * depth, -1, 1)

# 鋸波歪み（逆相合成）
def reversed_sawtooth_distortion(input_wave, depth=0.5):
    saw_wave = np.sin(2 * np.pi * freq * t)
    return np.clip(input_wave + -saw_wave * depth, -1, 1)

# 波形の生成（異なる歪みを適用）
overdriven_wave = overdrive(sine_wave, 0.7)
fuzzed_wave = fuzz(sine_wave, 2.0)
sawtooth_distorted_wave = sawtooth_wave_distortion(sine_wave, 0.7)
reversed_sawtooth_wave = reversed_sawtooth_distortion(sine_wave, 0.7)

# 波形をプロット
plt.figure(figsize=(10, 8))

# サイン波
plt.subplot(5, 1, 1)
plt.plot(t[:500], sine_wave[:500])  # 最初の500サンプルを表示
plt.title("Original Sine Wave")

# オーバードライブ
plt.subplot(5, 1, 2)
plt.plot(t[:500], overdriven_wave[:500])
plt.title("Overdrive Distortion")

# ファズ
plt.subplot(5, 1, 3)
plt.plot(t[:500], fuzzed_wave[:500])
plt.title("Fuzz Distortion")

# 鋸波歪み
plt.subplot(5, 1, 4)
plt.plot(t[:500], sawtooth_distorted_wave[:500])
plt.title("Sawtooth Wave Distortion")

# 逆相鋸波歪み
plt.subplot(5, 1, 5)
plt.plot(t[:500], reversed_sawtooth_wave[:500])
plt.title("Reversed Sawtooth Wave Distortion")

plt.tight_layout()
plt.show()
