```python
import numpy as np
import matplotlib.pyplot as plt

# Function to create a sample audio signal (sine wave with noise)
def create_audio_signal(freq, duration, sample_rate):
    t = np.linspace(0, duration, int(sample_rate * duration), endpoint=False)
    signal = 0.5 * np.sin(2 * np.pi * freq * t) + 0.1 * np.random.normal(size=t.shape)  # Sine wave + noise
    return t, signal

# Function for compression
def compress(signal, threshold, ratio):
    compressed_signal = np.copy(signal)
    above_threshold = compressed_signal > threshold
    compressed_signal[above_threshold] = threshold + (compressed_signal[above_threshold] - threshold) / ratio
    return compressed_signal

# Function for expansion
def expand(signal, threshold, ratio):
    expanded_signal = np.copy(signal)
    below_threshold = expanded_signal < threshold
    expanded_signal[below_threshold] = threshold + (expanded_signal[below_threshold] - threshold) * ratio
    return expanded_signal

# Parameters
freq = 440  # Frequency of the sine wave (A4)
duration = 2.0  # Duration in seconds
sample_rate = 10000  # Sample rate in Hz
threshold = 0.2  # Threshold for compression/expansion
compression_ratio = 4  # Compression ratio
expansion_ratio = 0.5  # Expansion ratio

# Create audio signal
t, audio_signal = create_audio_signal(freq, duration, sample_rate)

# Apply compression
compressed_signal = compress(audio_signal, threshold, compression_ratio)

# Apply expansion
expanded_signal = expand(compressed_signal, threshold, expansion_ratio)

# Plotting the results
plt.figure(figsize=(15, 12))

# Original Audio Signal
plt.subplot(3, 1, 1)
plt.plot(t, audio_signal, label='Original Audio Signal', color='blue')
plt.title('Original Audio Signal')
plt.xlabel('Time [s]')
plt.ylabel('Amplitude')
plt.grid()
plt.legend()

# Compressed Audio Signal
plt.subplot(3, 1, 2)
plt.plot(t, compressed_signal, label='Compressed Signal', color='orange')
plt.title('Compressed Audio Signal')
plt.xlabel('Time [s]')
plt.ylabel('Amplitude')
plt.grid()
plt.legend()

# Expanded Audio Signal
plt.subplot(3, 1, 3)
plt.plot(t, expanded_signal, label='Expanded Signal', color='green')
plt.title('Expanded Audio Signal')
plt.xlabel('Time [s]')
plt.ylabel('Amplitude')
plt.grid()
plt.legend()

plt.tight_layout()
plt.show()
```
